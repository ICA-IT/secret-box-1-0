; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/en/credits/

[Actions]
requiredWinstVersion >= "4.11.4.6"
ScriptErrorMessages=off

DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $LogDir$
DefVar $ProductId$  
DefVar $MinimumSpace$
DefVar $InstallDir$
DefVar $ExitCode$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$
DefVar $myProperty$
DefVar $errcode$
DefVar $testcode$
DefVar $WinVer$
DefVar $WinSysType$
DefVar $WinTypeExt$
Set $WinVer$ = GetMsVersionInfo
Set $WinSysType$ = GetSystemType

Set $LogDir$ = "%opsiLogDir%"


; ----------------------------------------------------------------
; - Please edit the following values                             -
; ----------------------------------------------------------------
;$ProductId$ should be the name of the product in opsi
; therefore please: only lower letters, no umlauts, 
; no white space use '-' as a seperator
Set $ProductId$       = "secret-box-1-0"
Set $MinimumSpace$    = "20 MB"
; the path were we find the product after the installation
Set $InstallDir$      = "%ProgramFiles32Dir%\secretbox"
Set $LicenseRequired$ = "false"
Set $LicensePool$     = "p_" + $ProductId$
; ----------------------------------------------------------------

Set $WinTypeExt$ = "x64"
if ($WinSysType$ = "x86 System")
    Set $WinTypeExt$ = "x86"
endif   

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError "No Space"
	; Stop process and set installation status to failed
else
	comment "Show product picture"
	ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$
	
	
	if FileExists("%ScriptPath%\delsub32.opsiscript")
		comment "Start uninstall sub section"
		Sub "%ScriptPath%\delsub32.opsiscript"
	endif
	
	Message "Installing " + $ProductId$ + " ..."
	
	comment "Start setup program"
	ChangeDirectory "%SCRIPTPATH%"
	
   ExecWith_vbs "%System%\cscript.exe"  "check_hotfix3.vbs" //E:vbscript
   Set $errcode$ = "0"
   set $testcode$ = getLastExitcode
   if ( $errcode$ = $testcode$ )
      comment "XP Help HotFix not found..."
      comment "Install WinXP Help File patch"
      Winbatch_install
   endif   
		
;	Sub_check_exitcode
	
	comment "Copy files"
	Files_install /32Bit
	
	comment "Create shortcuts"
	LinkFolder_install
	
	comment "Register log event handler"	
	Registry_PathPatch
	
endif


[Winbatch_install]
; Choose one of the following examples as basis for your installation
; You can use $LicenseKey$ var to pass a license key to the installer
;
; === Nullsoft Scriptable Install System ================================================================
; "%ScriptPath%\Setup.exe" /S
;
; === MSI package =======================================================================================
; You may use the parameter PIDKEY=$Licensekey$
; msiexec /i "%ScriptPath%\some.msi" /l* "$LogDir$\$ProductId$.install_log.txt" /qb-! ALLUSERS=1 REBOOT=ReallySuppress
;
; === InstallShield + MSI=====================================================================================
; Attention: The path to the log file should not contain any whitespaces
; "%ScriptPath%\setup.exe" /s /v" /l* $LogDir$\$ProductId$.install_log.txt /qb-! ALLUSERS=1 REBOOT=ReallySuppress"
; "%ScriptPath%\setup.exe" /s /v" /qb-! ALLUSERS=1 REBOOT=ReallySuppress"
;
; === InstallShield =====================================================================================
; Create setup.iss answer file by running: setup.exe /r /f1"c:\setup.iss"
; You may use an answer file by the parameter /f1"c:\setup.iss"
; "%ScriptPath%\setup.exe" /s /sms /f2"$LogDir$\$ProductId$.install_log.txt"
;
; === Inno Setup ========================================================================================
; http://unattended.sourceforge.net/InnoSetup_Switches_ExitCodes.html
; You may create setup answer file by: setup.exe /SAVEINF="filename"
; You may use an answer file by the parameter /LOADINF="filename"
; "%ScriptPath%\setup.exe" /sp- /silent /norestart /nocancel /SUPPRESSMSGBOXES

 "%System%\wusa.exe" /quiet "%ScriptPath%\files\$WinVer$\Windows-KB917607-$WinTypeExt$.msu"

[Files_install]
; Example of recursively copying some files into the installation directory:
;
 copy -s "%ScriptPath%\files\*.*" "$InstallDir$"


[LinkFolder_install]
; Example of deleting a folder from AllUsers startmenu:
;
 set_basefolder common_programs
 delete_subfolder $ProductId$
;
; Example of creating an shortcut to the installed exe in AllUsers startmenu:
;
 set_basefolder common_programs
 set_subfolder $ProductId$
;
 set_link
 	name: My Secret Box
 	target: $InstallDir$\passwin.exe
; 	parameters:
 	working_dir: $InstallDir$
; 	icon_file: $InstallDir$\passwin.exe
; 	icon_index: 1
 end_link
;
 set_link
 	name: My Secret Box Help
 	target: $InstallDir$\passwin.chm
; 	parameters:
 	working_dir: $InstallDir$
; 	icon_file: $InstallDir$\passwin.exe
; 	icon_index: 1
 end_link


[Sub_check_exitcode]
comment "Test for installation success via exit code"
set $ExitCode$ = getLastExitCode
; informations to exit codes see
; http://msdn.microsoft.com/en-us/library/aa372835(VS.85).aspx
; http://msdn.microsoft.com/en-us/library/aa368542.aspx
if ($ExitCode$ = "0")
	comment "Looks good: setup program gives exitcode zero"
else
	comment "Setup program gives a exitcode unequal zero: " + $ExitCode$
	if ($ExitCode$ = "1")
	comment "The update does not apply to your system" 
	else
	   if ($ExitCode$ = "1605")
		   comment "ERROR_UNKNOWN_PRODUCT	1605	This action is only valid for products that are currently installed."
		   comment "Uninstall of a not installed product failed - no problem"
	   else
		   if ($ExitCode$ = "1641")
			   comment "looks good: setup program gives exitcode 1641"
			   comment "ERROR_SUCCESS_REBOOT_INITIATED	1641	The installer has initiated a restart. This message is indicative of a success."
		   else
			   if ($ExitCode$ = "3010")
				   comment "looks good: setup program gives exitcode 3010"
				   comment "ERROR_SUCCESS_REBOOT_REQUIRED	3010	A restart is required to complete the install. This message is indicative of a success."
			   else
				   logError "Fatal: Setup program gives an unknown exitcode unequal zero: " + $ExitCode$
				   isFatalError
			   endif
		   endif
	   endif
	endif
endif


[execWith_vbs]
REM this is a dummy file... cscript requires an input file name as an argument... see check_hotfix3.vbs
strComputer = "."
Set objWMIService = GetObject("winmgmts:" _
& "{impersonationLevel=impersonate}!\\" & strComputer & "\root\cimv2")

Set colQuickFixes = objWMIService.ExecQuery _
("Select * from Win32_QuickFixEngineering")

For Each objQuickFix in colQuickFixes
REM If InStr(1,objQuickFix.HotFixID,"KB954155",1) Then
If InStr(1,objQuickFix.HotFixID,"KB917607",1) Then
wscript.Echo "KB917607 found"
WScript.Quit 1
End If
Next
wscript.Echo "KB917607 not found"
WScript.Quit 0

[Registry_PathPatch]
openkey [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\passwinlog]
set "CategoryCount"=REG_DWORD:3
set "CategoryMessageFile"="$InstallDir$\passwinlog.dll"
set "EventMessageFile"="$InstallDir$\passwinlog.dll"
set "ParameterMessageFile"="$InstallDir$\passwinlog.dll"
set "TypesSupported"=REG_DWORD:7


